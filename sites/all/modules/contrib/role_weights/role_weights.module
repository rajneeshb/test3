<?php
// $Id: role_weights.module,v 1.23.2.5 2009/07/07 15:10:01 leafishpaul Exp $

/**
 * @file
 * Allows users to specify weights for user roles.
 */

/**
 * Implementation of hook_help().
 */
function role_weights_help($path, $arg) {
  switch ($path) {
    case 'admin/help#role_weights':
      $output = '<p>'. t('Role Weights is a small utility module to allow site admins to specify weights for user roles. Once installed, users with <em>administer users</em> permission can set weights for roles on the <a href="@roles">Roles configuration page</a>.', array('@roles' => url('admin/user/roles'))) .'</p>';
      $output .= '<p>'. t('Admins can optionally enable sorting roles by weight on <a href="@roles">Roles</a> and <a href="@permissions">Permissions</a> by visiting the <a href="@roleweights">Role Weights configuration page</a>.', array('@roles' => url('admin/user/roles'), '@permissions' => url('admin/user/permissions'), '@roleweights' => url('admin/settings/role_weights'))) .'</p>';
      $output .= '<p>'. t('For more information visit <a href="http://drupal.org/project/role_weights">Role Weights module page on drupal.org</a>.') .'</p>';
      return $output;

    case 'admin/settings/role_weights':
      return t('<p>Configure how Role Weights affects the sorting of various core configuration pages. To set role weights, edit the relevant role on the <a href="@roles">Roles configuration page</a>.</p>', array('@roles' => url('admin/user/roles')));
  }
}

/**
 * Implementation of hook_menu().
 */
function role_weights_menu() {
  $items['admin/settings/role_weights'] = array(
    'title' => 'Role Weights',
    'description' => "Enable sorting roles by weight on the Roles and Permissions configuration pages.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('role_weights_settings_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM, 
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function role_weights_theme($existing, $type, $theme, $path) {
  return array(
    'role_weights_admin_new_role' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Form callback for the admin settings form.
 */
function role_weights_settings_form() {
  $form = array();

  $form['role_weights_reorder_forms'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable sort by role weights'),
    '#default_value' => variable_get('role_weights_reorder_forms', FALSE),
    '#description' => t('Enable sorting roles by weight on the Roles (admin/user/roles) and Permissions (admin/user/permissions) pages. <em>Please note that this setting will override Drupal\'s default alphabetical sorting: if enabled and role weights are <strong>not</strong> set (or are equal), sorting will be less than satisfactory. There is an <a href="http://drupal.org/node/368088">issue open for this on drupal.org</a></em>'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter().
 *
 * User.module's role handling is not fully Forms API
 * compliant, in that it doesn't trigger drupal_submit_form,
 * instead directly reading in the $_POST['edit']
 * array. Here we 'fix' this problem by altering the
 * submit behavior. This way, we can add to existing
 * role forms, and also act on role deletion (deleting
 * role_weights).
 */
function role_weights_form_alter(&$form, &$form_state, $form_id) {

  // Alter the 'user_admin_new_role' form to retheme.
  if ($form_id == 'user_admin_new_role') {
    $form['#theme'] = 'role_weights_admin_new_role';
  }
  elseif ($form_id == 'user_admin_role') {
    $rid = arg(4);
    _role_weights_shift_rid($rid, FALSE);

    // Lock the anonymous and authenticated roles.
    if (in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      switch ($rid) {
        case DRUPAL_ANONYMOUS_RID:
          $name = 'anonymous user';
          break;
        case DRUPAL_AUTHENTICATED_RID:
          $name = 'authenticated user';
          break;
      }

      $form['#prefix'] = t('<strong>@name</strong> (locked)', array('@name' => $name));

      // Pass the name and rid as values, so that they will register properly on submit.
      $form['name'] = array(
        '#type' => 'value',
        '#value' => $name,
      );
      $form['rid'] = array(
        '#type' => 'value',
        '#value' => $rid,
      );
    }

    $weight = role_weights_get_weight($rid);
    $form['weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight'),
      '#description' => t('Set a lower number to have this role take precedence over other roles.'),
      '#default_value' => $weight,
    );
    // By changing the values of the buttons, we force
    // user_admin_role() to bypass its custom handling of
    // form submission and instead use the regular Forms API
    // method of building and submitting the form.
    $form['submit']['#value'] = t('Save');
    $form['delete']['#value'] = t('Delete');
    // Reset weights so that the 'weight' field doesn't
    // appear below the buttons.
    $form['submit']['#weight'] = 9;
    $form['delete']['#weight'] = 10;
    $form['#submit'][] = 'role_weights_admin_role_submit';
  }
  elseif ($form_id == 'user_admin_perm' && variable_get('role_weights_reorder_forms', FALSE)) {
    // For each role, fetch the weight, and add as a #weight on the row names and checkboxes
    foreach ($form['checkboxes'] as $key => $value) {
      if (is_numeric($key)) {
        $weight = role_weights_get_weight($key);
        $form['checkboxes'][$key]['#weight'] = $weight;
        $form['role_names'][$key]['#weight'] = $weight;
      }
    }
    // Resort according to the adjusted weights
    uasort($form['checkboxes'], 'element_sort');
    uasort($form['role_names'], 'element_sort');
  }
}

/**
 * Theme the 'user_admin_new_role' form.
 *
 * Based on theme_user_admin_new_role(), this version
 * doesn't lock anonymous and authenticated user
 * links, as we need to be able to navigate to them
 * to provide weights. We will lock them in the role
 * admin form instead.
 *
 */
function theme_role_weights_admin_new_role($form) {
  $header = array(t('Name'), array('data' => t('Operations'), 'colspan' => 2));

  $user_roles = user_roles();
  if (variable_get('role_weights_reorder_forms', FALSE)) {
    uksort($user_roles, '_role_weights_rid_compare');
  }

  foreach ($user_roles as $rid => $name) {
    $edit_permissions = l(t('edit permissions'), 'admin/user/permissions/'. $rid);

    // Drupal core redirects if the rid is DRUPAL_ANONYMOUS_RID or DRUPAL_AUTHENTICATED_RID.
    // We prevent this by shifting the rid.
    _role_weights_shift_rid($rid);
    $rows[] = array($name, l(t('edit role'), 'admin/user/roles/edit/'. $rid), $edit_permissions);
  }
  $rows[] = array(drupal_render($form['name']), array('data' => drupal_render($form['submit']), colspan => 2));

  return drupal_render($form) . theme('table', $header, $rows);
}

/**
 * Submission from role_weights_admin form.
 */
function role_weights_admin_role_submit($form, &$form_state) {
  $id = arg(4);
  _role_weights_shift_rid($id, FALSE);

  switch ($form_state['values']['op']) {
    case t('Save'):
      // Handle the role name update previously done in user_admin_role().
      db_query("UPDATE {role} SET name = '%s' WHERE rid = %d", $form_state['values']['name'], $id);

      // Now set weights.
      _role_weights_set_weight($id, $form_state['values']['weight']);
      drupal_set_message(t('The changes have been saved.'));
      break;
    case t('Delete'):
      // Handle the role deletion previously done in user_admin_role().
      db_query('DELETE FROM {role} WHERE rid = %d', $id);
      db_query('DELETE FROM {permission} WHERE rid = %d', $id);

      // Update the users who have this role set:
      db_query('DELETE FROM {users_roles} WHERE rid = %d', $id);

      // Now delete weight data.
      db_query('DELETE FROM {role_weights} WHERE rid = %d', $id);

      drupal_set_message(t('The role has been deleted.'));
      break;
  }

  $form_state['redirect'] = 'admin/user/roles';
  $form_state['rid'] = $id;
}

/**
 * Returns a weight for a given role rid.
 *
 * @param $role_id
 *   A role rid
 * @param $refresh
 *   If true, the static cache will be refreshed (used if you want to change
 *   the weight in the midst of a page load). This is done automatically by
 *   _role_weights_set_weight() - you should not need to do this.
 * @return
 *   A corresponding weight for the role
 */
function role_weights_get_weight($role_id = NULL, $refresh = FALSE) {
  // Static cache the weights, to improve performance
  static $weights;
  if (!$weights || $refresh) {
    $weights = _role_weights_get_weights();
  }
  return ($weights[$role_id] != NULL) ? $weights[$role_id] : 0;
}

/**
 * Accepts a standard roles array from user object
 * and returns the 'highest' based on the current weights
 * settings.
 *
 * @TODO Perhaps deprecate this in favour of calling role_weights_get_weighted_max() with parameter.
 *       Included here so we don't break things in 5.x
 *       Leaving out a "role_weights_get_lowest" function
 *
 * @param $roles
 *   A role array containing a users roles - $rid -> $role_name
 * @return
 *   A role id defining the users' single, 'highest' role
 */
function role_weights_get_highest($roles) {
  return role_weights_get_weighted_max($roles, 'lightest');
}

/**
 * Accepts a standard roles array from user object
 * and returns the 'lightest' or 'heaviest' based on
 * the current weights settings.
 *
 * @param $roles
 *   A role array containing a users roles - $rid -> $role_name
 * @param $weight_end
 *   Which weight to get - 'lightest' or 'heaviest'
 * @return
 *   The lighest or heaviest role id from $roles
 */
function role_weights_get_weighted_max($roles, $weight_end = 'lightest') {
  $role_weights = _role_weights_get_weights();

  if ($weight_end == 'lightest') {
    asort($role_weights);
  }
  else {
    arsort($role_weights);
  }

  // Run through $roles, returning FIRST role matched
  foreach ($role_weights as $rid => $weight) {
    if (array_key_exists($rid, $roles)) {
      return $rid;
    }
  }
}

/**
 * Sets role weight for a role based on form input.
 */
function _role_weights_set_weight($rid, $weight) {
  $exists = db_result(db_query('SELECT COUNT(*) FROM {role_weights} WHERE rid = %d', $rid));
  if ($exists) {
    db_query('UPDATE {role_weights} SET weight=%d WHERE rid=%d', $weight, $rid);
  }
  else {
    db_query('INSERT INTO {role_weights} (rid, weight) VALUES (%d, %d)', $rid, $weight);
  }
  // Force role_weights_get_weight to refresh it's static cache
  role_weights_get_weight(NULL, TRUE);
}

/**
 * Returns current role weights
 */
function _role_weights_get_weights() {
  $weights = array();
  $result = db_query('SELECT * FROM {role_weights}');
  while ($row = db_fetch_object($result)) {
    $weights[$row->rid] = $row->weight;
  }
  return $weights;
}

/**
 * Helper function to shift role ids up or down.
 */
function _role_weights_shift_rid(&$rid, $decrement = TRUE) {
  if ($decrement === TRUE && in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
    $rid = $rid - 2;
  }
  elseif ($decrement === FALSE && $rid < 1) {
    $rid = $rid + 2;
  }
}

/**
 * compare function for sorting user_roles() by weight using uksort()
 */
function _role_weights_rid_compare($r1, $r2) {
  $r1_weight = role_weights_get_weight($r1);
  $r2_weight = role_weights_get_weight($r2);

  if ($r1_weight == $r2_weight) {
    return 0;
  }

  return ($r1_weight < $r2_weight) ? -1 : 1;
}

/**
 * Views 2 support
 */
function role_weights_views_api() {
  return array('api' => 2);
}

/**
 * Token support
 */
function role_weights_token_values($type, $object = NULL, $options = array()) {
  if ($type == 'user') {
    $user = $object;
    $lightest_role = role_weights_get_weighted_max($user->roles, 'lightest');
    $tokens['lightest-role']    = check_plain($user->roles[$lightest_role]);
    $tokens['lightest-role-id'] = $lightest_role;

    $heaviest_role = role_weights_get_weighted_max($user->roles, 'heaviest');
    $tokens['heaviest-role']    = check_plain($user->roles[$heaviest_role]);
    $tokens['heaviest-role-id'] = $heaviest_role;

    return $tokens;
  }
}

function role_weights_token_list($type = 'all') {
  if ($type == 'user' || $type == 'all') {
    $tokens['user']['lightest-role']    = t("The user's lightest role name");
    $tokens['user']['lightest-role-id'] = t("The user's lightest role id");
    $tokens['user']['heaviest-role']    = t("The user's heaviest role name");
    $tokens['user']['heaviest-role-id'] = t("The user's heaviest role id");
    return $tokens;
  }
}
