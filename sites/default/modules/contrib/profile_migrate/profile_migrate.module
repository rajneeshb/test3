<?php
function profile_migrate_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/user/profile_migrate':  
      return t('<p>This module will migrate the core profile fields to nodes for use with the Content Profile module. The reason for using Content Profile rather than the core Profile module is because fields available in Content Profile are more diverse and flexible than the core profile fields. There are also differences in the ways they can be used in Views. Some fields, like date fields, can only be sorted and filtered in Views if they are Content Profile fields. In addition, migrating to Content Profile now may create an easier upgrade path for Drupal 7.
</p><p>
Go to the User Administration area to see a place where the migration can be configured. You can choose which content type should be the profile and whether each profile category will become a fieldgroup on a single content type or a separate, new, content type. Do not add new fields to your content type for the profile fields, the fields will be added automatically. It is fine to have other, unrelated, fields on the main profile content type, they will not be affected by this processing.
</p><p>
The core profile fields will be analyzed and they will automatically added to the profile content type. If you choose the option to treat each category as a separate content type, the additional content types and their fields will also be created. 
</p><p>
Once all the fields have been created, the data will be migrated to the new locations in a batch process that will display the name of the user being migrated. 
</p><p>
The original profile tables are not deleted by this processing, so the original data remains where it can be used by other modules. The tables will be deleted when the profile module is uninstalled.
</p><p>
As always making changes like this, be sure to create a good backup first.</p>');
  }
}

/**
 * Implementation of hook_menu().
 */
function profile_migrate_menu() {
  $items = array(
    'admin/user/profile_migrate' => array(
      'title' => 'Profile Migrate',
      'description' => 'Migrate core profile fields to use Content Profile.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('profile_migrate_settings_form'),
      'access arguments' => array('administer nodes'),
    ),
  );
  return $items;
}

function profile_migrate_settings_form() {
  $form = array();
  // See if all the necessary modules are enabled.
  $modules = array('content', 'content_profile');
  $result = db_query("SELECT DISTINCT type FROM {profile_fields}");
  while ($row = db_fetch_object($result)) {
    switch ($row->type) {
      case 'textfield':
      case 'textarea':
      case 'list':
        $modules[] = 'text';
        break;
      case 'checkbox':
      case 'select':
        $modules[] = 'text';
        $modules[] = 'optionwidgets';
        break;
      case 'link':
        $modules[] = 'link';
        break;
      case 'date':
        $modules[] = 'date';
        break;
    }
  }
  $modules = array_unique($modules);
  $error = FALSE;
  foreach ($modules as $module) {
    if (!module_exists($module)) {
      drupal_set_message(t('The @module module must be enabled before these fields can be migrated.', 'error'));
      $error = TRUE;
    }
  }
  if ($error) {
    return $form;
  }
  $form['type_name'] = array(
    '#type' => 'select',
    '#options' => node_get_types('names'),
    '#default_value' => 'profile',
    '#title' => t('Profile type'),
    '#description' => t('The content type to use for the profile.'),
  );
  $form['method'] = array(
    '#type' => 'select',
    '#options' => array('fieldgroup' => t('Fieldgroup'), 'type' => t('Content type')),
    '#default_value' => 'fieldgroup',
    '#title' => t('Each category is a'),
    '#description' => t('The way to handle profile categories. Either treat each category as a fieldgroup on the content type selected above, or use the above content type for the first category and then create a new content type for each additional category, each with the fields used in that category.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function profile_migrate_settings_form_submit(&$form, &$form_state) {
  $type_name = $form_state['values']['type_name'];
  $method = $form_state['values']['method'];
  profile_migrate($type_name, $method);
}

/**
 * Migrate profile data to content profile.
 *
 * @param $type_name
 *   The name of the main profile type.
 * 
 * @param $method 'fieldgroup' or 'type'
 *   Handling method for categories, treat each category
 *   as either a fieldgroup on the main profile type or
 *   create a new content type for each one.
 */
function profile_migrate($type_name = 'profile', $method = 'fieldgroup') {
  if (method == 'fieldgroup') {
    module_enable(array('fieldgroup'));
  }
  $batch = array(
    'title' => t('Migrating Profile fields'),
    'operations' => array(
      array('profile_migrate_fields', array($type_name, $method)),
      array('profile_migrate_data', array($type_name, $method)),
    ),
    'finished' => 'profile_migrate_batch_finished'
  );
  batch_set($batch);
}

function profile_migrate_fields($type_name, $method, &$context) {
  // This is a somewhat long process that is hard to break
  // down into smaller steps, we don't want to timeout.
  $old_time = ini_get('max_execution_time');
  ini_set('max_execution_time', 240);
  
  module_load_include('inc', 'content', 'includes/content.crud');
  
  $types = content_types();
  $cat_count = 0;
  
  $all_fields = array_keys(content_fields());
  $new_names = array();
  $new_types = array();
  $new_groups = array();
  
  // Get all profile fields.
  $result = db_query('SELECT * FROM {profile_fields} ORDER BY category, weight');
  $replace = array(
    'profile_' => 'field_',
  );
  $replace_name = array(
     ' ' => '_',
  );
      
  while($old_field = db_fetch_object($result)) {
    // Create field instance.
    $context['message'] = t('Migrating field %name', array('%name' => $old_field->name));
  
    // Create a unique new name.
    $field_name = strtolower(strtr($old_field->name, $replace));
    while (in_array($field_name, $all_fields)) {
      $field_name .= '_1';
    }
    $new_fields[$old_field->name] = $field_name;
    $visible = $old_field->visibility == 2 || $old_field->visibility == 3;
    $format = $visible ? 'default' : 'hidden';
    $field = array( 
      'field_name' => $field_name,
      'type_name' => $type_name,
      'display_settings' => array(
        'label' => array(
          'format' => $visible ? 'inline' : 'hidden',
        ),
        'teaser' => array(
           'format' => $format,
           'exclude' => 0,
        ),
        'full' => array(
           'format' => $format,
           'exclude' => 0,
        ),
        4 => array(
          'format' => $format,
          'exclude' => 0,
        ),
      ),
      'widget_active' => 1,
      'required' => $old_field->required,
      'multiple' => 0,
      'active' => 1,
      'locked' => 0,
      'widget' => array(
        'rows' => 1,
        'size' => 60,
        'default_value' => array(),
        'default_value_php' => '',
        'label' => $old_field->title,
        'weight' => $old_field->weight,
        'description' => $old_field->explanation, 
      ),
    );
    
    switch ($old_field->type) {
      case 'textfield':
        $field['type'] = 'text';
        $field['module'] = 'text';
        $field['widget']['type'] = 'text_textfield';
        $field['widget']['module'] = 'text';
        
        // Only allow plain text.
        $field['text_processing'] = 0;
        $field['max_length'] = '';
        $field['allowed_values'] = '';
        $field['allowed_values_php'] = '';
      break;
        
      case 'textarea':
        $field['type'] = 'text';
        $field['module'] = 'text';
        $field['widget']['type'] = 'text_textarea';
        $field['widget']['module'] = 'text';
        
        // Use the default text format.
        $field['text_processing'] = 1;
        $field['max_length'] = '';
        $field['allowed_values'] = '';
        $field['allowed_values_php'] = '';
        break;
        
      case 'checkbox':
        $field['type'] = 'number_integer';
        $field['module'] = 'number';
        $field['widget']['type'] = 'optionwidgets_onoff';
        $field['widget']['module'] = 'optionwidgets';
        
        $field['text_processing'] = 0;
        $field['max_length'] = '';
        $field['allowed_values'] = '0|--' . "\n" .'1|'. $old_field->title;
        $field['allowed_values_php'] = '';
        break;
        
      case 'selection':
        $field['type'] = 'text';
        $field['module'] = 'text';
        $field['widget']['type'] = 'options_select';
        $field['widget']['module'] = 'text';
        
        $field['text_processing'] = 0;
        $field['max_length'] = '';
        $field['allowed_values'] = $old_field->options;
        $field['allowed_values_php'] = '';        
        break;
        
      case 'list':
        $field['type'] = 'text';
        $field['module'] = 'text';
        $field['widget']['type'] = 'text_textarea';
        $field['widget']['module'] = 'text';
        
        $field['text_processing'] = 0;
        $field['max_length'] = '';
        $field['allowed_values'] = $old_field->options;
        $field['allowed_values_php'] = '';        
        break;
        
      case 'date':
        $field['type'] = 'date';
        $field['module'] = 'date';
        $field['widget']['type'] = 'date_select';
        $field['widget']['module'] = 'date';        
        
        $field['granularity'] = array (
          'year' => 'year',
          'month' => 'month',
          'day' => 'day',
        );
        $field['timezone_db'] = variable_get('date_default_timezone_name', 'UTC');
        $field['tz_handling'] = 'none';
        $field['todate'] = '';
        $field['repeat'] = 0;
        $field['repeat_collapsed'] = '';
        $field['default_format'] = 'short';
        $field['widget']['default_value'] = 'blank';
        $field['widget']['default_value_code'] = '';
        $field['widget']['default_value2'] = 'same';
        $field['widget']['default_value_code2'] = '';
        $field['widget']['input_format'] = variable_get('date_format_short', 'm/d/Y - H:i');
        $field['widget']['input_format_custom'] = '';
        $field['widget']['increment'] = '1';
        $field['widget']['text_parts'] = array();
        $field['widget']['year_range'] = '-50:+0';
        $field['widget']['label_position'] = 'above';
        break;
        
      case 'url':
        $field['type'] = 'link';
        $field['module'] = 'link';
        $field['widget']['type'] = 'link';
        $field['widget']['module'] = 'link';
        
        $field['attributes'] = array (
          'target' => 'user',
          'rel' => 'nofollow',
          'class' => '',
        );
        $field['display'] = array (
          'url_cutoff' => '80',
        );
        $field['url'] = 0;
        $field['title'] = 'none';
        $field['title_value'] = '';
        $field['enable_tokens'] = 0;

        break;
    }
    
    content_field_instance_create($field);
    $new_names[$old_field->name] = $field['field_name'];
      
    if ($method == 'fieldgroup') {
      $group_name = strtolower(strtr($old_field->category, $replace_name));
      $new_groups[$old_field->category] = $group_name;
      $field['group_name'] = $group_name;
      $groups = fieldgroup_groups($type_name, FALSE, TRUE);
      if (!array_key_exists($group_name, $groups)) {
        $group = array(
          'group_type' => 'standard',
          'type_name' => $type_name,
          'group_name' => $group_name,
          'label' => $old_field->category,
          'settings' => array (
            'form' => array (
              'style' => 'fieldset',
              'description' => '',
            ),
            'display' => array (
              'description' => '',
              'label' => 'above',
              'teaser' => array (
                'format' => 'fieldset',
                'exclude' => 0,
              ),
              'full' => array (
                'format' => 'fieldset',
                'exclude' => 0,
              ),
              4 => array (
                'format' => 'fieldset',
                'exclude' => 0,
              ),
              2 => array (
                'format' => 'fieldset',
                'exclude' => 0,
              ),
              3 => array (
                'format' => 'fieldset',
                'exclude' => 0,
              ),
              5 => array (
                'format' => 'fieldset',
                'exclude' => 0,
              ),
              'token' => array (
                'format' => 'fieldset',
                'exclude' => 0,
              ),
            ),
          ),
          'weight' => $cat_count,
          'fields' => array (),
        );
        fieldgroup_save_group($type_name, $group);
        $cat_count++;
      }
      fieldgroup_update_fields(array('field_name' => $field_name, 'group' => $group_name, 'type_name' => $type_name));
    }
    else {
      if ($cat_count > 0) {
        $type_name = strtolower(strtr($old_field->category, $replace_name));
        $types = node_get_types('names', NULL, TRUE);
        while (in_array($type_name, $types)) {
          $type_name .= '_1';
        }
      }
      $new_types[$old_field->category] = $type_name;
      
      if ($cat_count > 0 && !array_key_exists($type_name, $types)) { 
        $type = array(
          'type' => $type_name,
          'name' => $old_field->category,
          'module' => 'node',
          'description' => t('A user profile built as content.'),
          'custom' => TRUE, 
          'locked' => FALSE, 
          'node_options' => array (
            'status' => TRUE,
            'promote' => FALSE, 
            'sticky' => FALSE,
            'revision' => FALSE,
          ),
        );
        $type = (object) _node_type_set_defaults($type);
        node_type_save($type);
      }     
      $cat_count++;
    }
    variable_set('content_profile_use_'. $type_name, 1);
    $settings = content_profile_content_profile_settings();
    variable_set('content_profile_'. $type_name, $settings);
  }
  $_SESSION['sandbox']['new_fields'] = $new_fields;
  $_SESSION['sandbox']['new_groups'] = $new_groups;
  $_SESSION['sandbox']['new_types'] = $new_types;
  $context['finished'] = 1;
  
  ini_set('max_execution_time', $old_time);
  return;
}

function profile_migrate_data($type_name, $method, &$context) {
  if (empty($context['sandbox'])) {
    // Initiate multistep processing.
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_uid'] = 0;
    $context['sandbox']['max'] = db_result(db_query('SELECT COUNT(DISTINCT uid) FROM {profile_values}'));
    $results = db_query('SELECT DISTINCT(uid) FROM {profile_values} v ORDER BY uid');
    while($row = db_fetch_object($results)) {
      $context['sandbox']['uids'][] = $row->uid;
    }
    $_SESSION['sandbox']['uids'] = $context['sandbox']['uids'];
  }
  $prev_category = '';
  $uid = array_shift($context['sandbox']['uids']);
  $user = user_load(array('uid' => $uid));
  $node = new stdClass();
  $node->type = $type_name;
  $node->title = $user->name;
  $node->uid = $uid;
  $context['message'] = t('Migrating data for user #%id %name', array(
    '%id' => $uid, '%name' => $user->name));
  $results = db_query('SELECT * FROM {profile_fields} f JOIN {profile_values} v ON f.fid = v.fid WHERE uid = %d ORDER BY v.uid, f.category', $uid);
  while($row = db_fetch_object($results)) {
    if ($method != 'fieldgroup') {
      if ($prev_category != $row->category) {
        if ($prev_category != '') {
          node_save($node);
        }
        $types = array_keys(node_get_types('names', NULL, TRUE));
        $type_name = $_SESSION['sandbox']['new_types'][$row->category];
        $node = new stdClass();
        $node->type = $type_name;
        $node->title = $user->name;
        $node->uid = $uid;
        $prev_category = $row->category;
      }
    }
    $field_name = $_SESSION['sandbox']['new_fields'][$row->name];
        
    switch ($row->type) {
      case 'textfield':
      case 'checkbox':
      case 'selection':
        $node->$field_name = array(0 => array('value' => $row->value));
        break;
      
      case 'textarea':
        $node->$field_name = array(
          0 => array(
            'value' => $row->value,
            'format' => 1,
            )
        );
        break;
          
      case 'list':
        $node->$field_name = array(0 => array('value' => implode(', ', explode("\n", $row->value))));        
        break;
        
      case 'date':
        $date = unserialize($row->value);
        $date = sprintf('%04d', $date['year']) .'-'. sprintf('%02d', $date['month']) .'-'. sprintf('%02d', $date['day']) .'T00:00:00';
        $node->$field_name = array(0 => array('value' => $date));
        break;
        
      case 'url':
        $node->$field_name = array(0 => array('value' => $row->value));
        break;
    }
  }
  node_save($node);
  
  // Multistep processing : report progress.
  $context['sandbox']['current_uid'] = $uid;
  $context['sandbox']['progress']++;
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  } 
  return; 
}

/**
 * Post-processing migration.
 */
function profile_migrate_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The profile fields have been migrated.'));
  }
  else {
    drupal_set_message(t('There was a problem migrating the profile fields.'), 'error');
  }
  //dsm($_SESSION['sandbox']);
  cache_clear_all();
}